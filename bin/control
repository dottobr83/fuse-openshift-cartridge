#!/bin/bash
source $OPENSHIFT_CARTRIDGE_SDK_BASH

function start {
    /usr/sbin/httpd -f $OPENSHIFT_BUILDER_DIR/etc/httpd.conf -k start
}

function stop {
    /usr/sbin/httpd -f $OPENSHIFT_BUILDER_DIR/etc/httpd.conf -k stop
}

function restart {
    /usr/sbin/httpd -f $OPENSHIFT_BUILDER_DIR/etc/httpd.conf -k restart
}

function build() {
  
  BUILD_NUMBER_FILE="${OPENSHIFT_DEPENDENCIES_DIR}build-number.txt"
  BUILD_NUMBER=`cat ${BUILD_NUMBER_FILE}`
  BUILD_NUMBER=$((${BUILD_NUMBER}+1))
  BUILD_NUMBER_PADDED=`printf "%04d" "${BUILD_NUMBER}"`
  echo ${BUILD_NUMBER} > ${BUILD_NUMBER_FILE}
  
  MAVEN_SETTINGS_FILE="${OPENSHIFT_BUILDER_DIR}/etc/settings.xml"
  if $(echo $OPENSHIFT_GEAR_DNS | egrep -qe "\.rhcloud\.com")
  then
      MAVEN_SETTINGS_FILE="${OPENSHIFT_BUILDER_DIR}/etc/rhcloud.settings.xml"
  fi

  max_memory_mb=${OPENSHIFT_GEAR_MEMORY_MB}

  # If hot deploy is enabled, we need to restrict the Maven memory size to fit
  # alongside the running application server. For now, just hard-code it to 64
  # and figure out how to apply a scaling factor later.
  if hot_deploy_enabled_for_latest_deployment
  then
      echo "Scaling down Maven heap settings"

      if [ -z "$MAVEN_JVM_HEAP_RATIO" ]; then
      MAVEN_JVM_HEAP_RATIO=0.25
    fi
  else
    if [ -z "$MAVEN_JVM_HEAP_RATIO" ]; then
      MAVEN_JVM_HEAP_RATIO=0.75
    fi
  fi

  max_heap=$( echo "$max_memory_mb * $MAVEN_JVM_HEAP_RATIO" | bc | awk '{print int($1+0.5)}')

  OPENSHIFT_MAVEN_XMX="-Xmx${max_heap}m"

  if force_clean_build_enabled_for_latest_deployment
  then
      echo "Force-clean build is enabled. Removing Maven dependencies." 1>&2
      rm -rf ${OPENSHIFT_HOMEDIR}.m2/* ${OPENSHIFT_HOMEDIR}.m2/.[^.]*
  fi

  if [ -f ${OPENSHIFT_REPO_DIR}pom.xml ] && ! marker_present skip_maven_build
  then
      pushd ${OPENSHIFT_REPO_DIR} > /dev/null

      if [ -z "$MAVEN_OPTS" ]; then
        export MAVEN_OPTS="$OPENSHIFT_MAVEN_XMX"
      fi

      if [ -z "$MAVEN_ARGS" ]; then
        export MAVEN_ARGS="clean install -Popenshift -DskipTests"
      fi

      echo "Found pom.xml... attempting to build with 'mvn -e ${MAVEN_ARGS}'" | tee -a "${OPENSHIFT_LOG_DIR}maven.log"

      if [ -n "$MAVEN_SETTINGS_FILE" ]
      then
          mvn --global-settings $MAVEN_SETTINGS_FILE --version | tee -a "${OPENSHIFT_LOG_DIR}maven.log"
          mvn --global-settings $MAVEN_SETTINGS_FILE $MAVEN_ARGS -Dbuild.number=${BUILD_NUMBER} -Dbuild.number.padded=${BUILD_NUMBER_PADDED} | tee -a "${OPENSHIFT_LOG_DIR}maven.log"
      else
          mvn --version | tee ${OPENSHIFT_LOG_DIR}maven.log
          mvn $MAVEN_ARGS -Dbuild.number=${BUILD_NUMBER} -Dbuild.number.padded=${BUILD_NUMBER_PADDED} | tee -a "${OPENSHIFT_LOG_DIR}maven.log"
      fi
      popd > /dev/null

      CART_NAME=${cartridge_type}
  fi

  if [ ! -f ${OPENSHIFT_REPO_DIR}pom.xml ]; then
    echo "Skipping Maven build due to absence of pom.xml"
  fi

  if marker_present "skip_maven_build"; then
    echo "skip_maven_build marker found; build will be skipped"
  fi

}

function catchall {
    echo "not yet implemented"
}
case "$1" in
  build)     build ;;
  start)     start ;;
  stop)      stop ;;
  restart)   restart ;;
  reload)    restart ;;
  deploy)    catchall ;;
  status)    catchall ;;
  tidy)      catchall ;;
  *)         exit 0
esac
